From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Paul Sauve <paul@technove.co>
Date: Sat, 13 Mar 2021 12:24:41 -0600
Subject: [PATCH] Remove iterators from inventory contains


diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index ca7fbe4f8c1e1d2fb90095aa35be4dda3029c23e..38c9fc3b740fcfaacae8c39defe2627c7442ca96 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -643,6 +643,8 @@ public class Inventory implements Container, Nameable {
     }
 
     public boolean contains(ItemStack stack) {
+        // Pufferfish start - don't allocate iterators
+        /*
         Iterator iterator = this.compartments.iterator();
 
         while (iterator.hasNext()) {
@@ -657,11 +659,26 @@ public class Inventory implements Container, Nameable {
                 }
             }
         }
+        */
+        for (int i = 0; i < this.compartments.size(); i++) {
+            List<ItemStack> list = this.compartments.get(i);
+
+            for (int j = 0; j < list.size(); j++) {
+                ItemStack itemstack1 = list.get(j);
+
+                if (!itemstack1.isEmpty() && ItemStack.isSameItemSameComponents(itemstack1, stack)) {
+                    return true;
+                }
+            }
+        }
+        // Pufferfish end
 
         return false;
     }
 
     public boolean contains(TagKey<Item> tag) {
+        // Pufferfish start - don't allocate iterators
+        /*
         Iterator iterator = this.compartments.iterator();
 
         while (iterator.hasNext()) {
@@ -676,11 +693,26 @@ public class Inventory implements Container, Nameable {
                 }
             }
         }
+        */
+        for (int i = 0; i < this.compartments.size(); i++) {
+            List<ItemStack> list = this.compartments.get(i);
+
+            for (int j = 0; j < list.size(); j++) {
+                ItemStack itemstack = list.get(j);
+
+                if (!itemstack.isEmpty() && itemstack.is(tag)) {
+                    return true;
+                }
+            }
+        }
+        // Pufferfish end
 
         return false;
     }
 
     public boolean contains(Predicate<ItemStack> predicate) {
+        // Pufferfish start - don't allocate iterators
+        /*
         Iterator iterator = this.compartments.iterator();
 
         while (iterator.hasNext()) {
@@ -695,6 +727,19 @@ public class Inventory implements Container, Nameable {
                 }
             }
         }
+        */
+        for (int i = 0; i < this.compartments.size(); i++) {
+            List<ItemStack> list = this.compartments.get(i);
+
+            for (int j = 0; j < list.size(); j++) {
+                ItemStack itemstack = list.get(j);
+
+                if (predicate.test(itemstack)) {
+                    return true;
+                }
+            }
+        }
+        // Pufferfish end
 
         return false;
     }
